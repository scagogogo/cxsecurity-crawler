package main

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
)

// VulnerabilityDetail 定义了漏洞详情的数据结构
type VulnerabilityDetail struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
	Data    struct {
		ID          string   `json:"id"`
		Title       string   `json:"title"`
		Date        string   `json:"date"`
		Risk        string   `json:"risk"`
		Tags        []string `json:"tags"`
		Author      string   `json:"author"`
		AuthorID    string   `json:"author_id"`
		Description string   `json:"description"`
		References  []string `json:"references"`
		CVE         string   `json:"cve"`
		CVSS        float64  `json:"cvss"`
		Affected    []string `json:"affected"`
		Solution    string   `json:"solution"`
	} `json:"data"`
}

func main() {
	// 设置API参数
	baseURL := "http://localhost:8080"
	token := "your-api-token-here"
	vulnID := "WLB-2024030123" // 示例漏洞ID

	// 构建请求URL
	detailURL := fmt.Sprintf("%s/api/vulnerability/%s", baseURL, vulnID)

	// 创建HTTP请求
	req, err := http.NewRequest("GET", detailURL, nil)
	if err != nil {
		fmt.Printf("创建请求失败: %v\n", err)
		return
	}

	// 添加认证Token
	req.Header.Add("X-API-Token", token)

	// 发送请求
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		fmt.Printf("发送请求失败: %v\n", err)
		return
	}
	defer resp.Body.Close()

	// 读取响应内容
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		fmt.Printf("读取响应失败: %v\n", err)
		return
	}

	// 解析JSON响应
	var detail VulnerabilityDetail
	if err := json.Unmarshal(body, &detail); err != nil {
		fmt.Printf("解析JSON失败: %v\n", err)
		return
	}

	// 打印漏洞详情
	fmt.Println("=== 漏洞详情 ===")
	fmt.Printf("ID: %s\n", detail.Data.ID)
	fmt.Printf("标题: %s\n", detail.Data.Title)
	fmt.Printf("发布日期: %s\n", detail.Data.Date)
	fmt.Printf("风险等级: %s\n", detail.Data.Risk)
	fmt.Printf("标签: %v\n", detail.Data.Tags)
	fmt.Printf("作者: %s (ID: %s)\n", detail.Data.Author, detail.Data.AuthorID)
	fmt.Printf("CVE编号: %s\n", detail.Data.CVE)
	fmt.Printf("CVSS评分: %.1f\n", detail.Data.CVSS)
	fmt.Println("\n=== 漏洞描述 ===")
	fmt.Println(detail.Data.Description)
	fmt.Println("\n=== 影响范围 ===")
	for _, affected := range detail.Data.Affected {
		fmt.Printf("- %s\n", affected)
	}
	fmt.Println("\n=== 解决方案 ===")
	fmt.Println(detail.Data.Solution)
	fmt.Println("\n=== 参考链接 ===")
	for _, ref := range detail.Data.References {
		fmt.Printf("- %s\n", ref)
	}
}

/*
示例输出：

=== 漏洞详情 ===
ID: WLB-2024030123
标题: Apache OFBiz 18.12.09 Remote Code Execution
发布日期: 2024-03-20
风险等级: High
标签: [RCE Apache CVE-2024-12345]
作者: Security Research Team (ID: SRT-2024)
CVE编号: CVE-2024-12345
CVSS评分: 8.8

=== 漏洞描述 ===
Apache OFBiz 18.12.09版本中存在远程代码执行漏洞。攻击者可以通过构造特殊的HTTP请求，
在目标系统上执行任意代码。此漏洞的根本原因是对用户输入的验证不足，导致了不安全的反序列化操作。

=== 影响范围 ===
- Apache OFBiz <= 18.12.09
- 使用默认配置的所有部署实例
- 暴露在公网的管理接口

=== 解决方案 ===
1. 升级Apache OFBiz到最新版本
2. 限制管理接口的访问范围
3. 启用安全审计日志
4. 实施网络访问控制策略

=== 参考链接 ===
- https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-12345
- https://ofbiz.apache.org/security/
- https://security-tracker.debian.org/tracker/CVE-2024-12345
*/
