package main

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
)

// CveDetail 定义了CVE详情的数据结构
type CveDetail struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
	Data    struct {
		ID          string   `json:"id"`          // CVE编号
		Title       string   `json:"title"`       // 标题
		Description string   `json:"description"` // 描述
		Date        string   `json:"date"`        // 发布日期
		CVSS        float64  `json:"cvss"`        // CVSS评分
		CWE         string   `json:"cwe"`         // CWE编号
		References  []string `json:"references"`  // 参考链接
		Affected    []string `json:"affected"`    // 受影响的系统/软件
		Solution    string   `json:"solution"`    // 解决方案
		Exploits    []struct {
			Title string `json:"title"` // 相关漏洞利用标题
			URL   string `json:"url"`   // 漏洞利用链接
			Date  string `json:"date"`  // 发布日期
		} `json:"exploits"` // 相关漏洞利用
	} `json:"data"`
}

func main() {
	// 设置API参数
	baseURL := "http://localhost:8080"
	token := "your-api-token-here"
	cveID := "CVE-2024-12345" // 示例CVE编号

	// 构建请求URL
	detailURL := fmt.Sprintf("%s/api/cve/%s", baseURL, cveID)

	// 创建HTTP请求
	req, err := http.NewRequest("GET", detailURL, nil)
	if err != nil {
		fmt.Printf("创建请求失败: %v\n", err)
		return
	}

	// 添加认证Token
	req.Header.Add("X-API-Token", token)

	// 发送请求
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		fmt.Printf("发送请求失败: %v\n", err)
		return
	}
	defer resp.Body.Close()

	// 读取响应内容
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		fmt.Printf("读取响应失败: %v\n", err)
		return
	}

	// 解析JSON响应
	var detail CveDetail
	if err := json.Unmarshal(body, &detail); err != nil {
		fmt.Printf("解析JSON失败: %v\n", err)
		return
	}

	// 打印CVE详情
	fmt.Println("=== CVE详情 ===")
	fmt.Printf("CVE编号: %s\n", detail.Data.ID)
	fmt.Printf("标题: %s\n", detail.Data.Title)
	fmt.Printf("发布日期: %s\n", detail.Data.Date)
	fmt.Printf("CVSS评分: %.1f\n", detail.Data.CVSS)
	fmt.Printf("CWE编号: %s\n", detail.Data.CWE)

	fmt.Println("\n=== 漏洞描述 ===")
	fmt.Println(detail.Data.Description)

	fmt.Println("\n=== 影响范围 ===")
	for _, affected := range detail.Data.Affected {
		fmt.Printf("- %s\n", affected)
	}

	fmt.Println("\n=== 解决方案 ===")
	fmt.Println(detail.Data.Solution)

	fmt.Println("\n=== 参考链接 ===")
	for _, ref := range detail.Data.References {
		fmt.Printf("- %s\n", ref)
	}

	if len(detail.Data.Exploits) > 0 {
		fmt.Println("\n=== 相关漏洞利用 ===")
		for _, exploit := range detail.Data.Exploits {
			fmt.Printf("标题: %s\n", exploit.Title)
			fmt.Printf("日期: %s\n", exploit.Date)
			fmt.Printf("链接: %s\n", exploit.URL)
			fmt.Println("----------------------------------------")
		}
	}
}

/*
示例输出：

=== CVE详情 ===
CVE编号: CVE-2024-12345
标题: Apache OFBiz Remote Code Execution Vulnerability
发布日期: 2024-03-20
CVSS评分: 8.8
CWE编号: CWE-502

=== 漏洞描述 ===
Apache OFBiz 18.12.09及之前版本中存在远程代码执行漏洞。该漏洞源于应用程序在处理序列化数据时
没有进行充分的安全验证。攻击者可以通过构造特制的HTTP请求，触发不安全的反序列化操作，从而在
目标系统上执行任意代码。

=== 影响范围 ===
- Apache OFBiz <= 18.12.09
- 所有使用默认配置的部署实例
- 暴露在公网的管理接口

=== 解决方案 ===
1. 立即升级到Apache OFBiz最新版本
2. 如果无法立即升级，建议：
   - 限制管理接口的访问范围
   - 启用安全审计日志
   - 实施严格的网络访问控制策略
3. 定期检查系统日志，监控可疑活动

=== 参考链接 ===
- https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-12345
- https://ofbiz.apache.org/security/CVE-2024-12345.html
- https://nvd.nist.gov/vuln/detail/CVE-2024-12345

=== 相关漏洞利用 ===
标题: Apache OFBiz RCE Exploit
日期: 2024-03-21
链接: https://cxsecurity.com/issue/WLB-2024030123
----------------------------------------
标题: OFBiz 18.12.09 RCE PoC
日期: 2024-03-22
链接: https://cxsecurity.com/issue/WLB-2024030124
----------------------------------------
*/
